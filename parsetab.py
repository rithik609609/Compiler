
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftLTGTLEGEEQNEDIVIDE ELSE EQ EQUALS FLOAT GE GT ID IF INT LE LPAREN LT MINUS NE PLUS RPAREN TIMESstatement : ID EQUALS expressionstatement : expressionexpression : IDexpression : INTexpression : FLOATexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expression\n                  | expression EQ expression\n                  | expression NE expression'
    
_lr_action_items = {'ID':([0,6,7,8,9,10,11,12,13,14,15,16,17,],[2,19,19,19,19,19,19,19,19,19,19,19,19,]),'INT':([0,6,7,8,9,10,11,12,13,14,15,16,17,],[4,4,4,4,4,4,4,4,4,4,4,4,4,]),'FLOAT':([0,6,7,8,9,10,11,12,13,14,15,16,17,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'LPAREN':([0,6,7,8,9,10,11,12,13,14,15,16,17,],[6,6,6,6,6,6,6,6,6,6,6,6,6,]),'$end':([1,2,3,4,5,19,20,21,22,23,24,25,26,27,28,29,30,31,],[0,-3,-2,-4,-5,-3,-1,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-10,]),'EQUALS':([2,],[7,]),'PLUS':([2,3,4,5,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[-3,8,-4,-5,8,-3,8,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-10,]),'MINUS':([2,3,4,5,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[-3,9,-4,-5,9,-3,9,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-10,]),'TIMES':([2,3,4,5,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[-3,10,-4,-5,10,-3,10,10,10,-8,-9,-11,-12,-13,-14,-15,-16,-10,]),'DIVIDE':([2,3,4,5,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[-3,11,-4,-5,11,-3,11,11,11,-8,-9,-11,-12,-13,-14,-15,-16,-10,]),'LT':([2,3,4,5,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[-3,12,-4,-5,12,-3,12,12,12,12,12,-11,-12,-13,-14,-15,-16,-10,]),'GT':([2,3,4,5,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[-3,13,-4,-5,13,-3,13,13,13,13,13,-11,-12,-13,-14,-15,-16,-10,]),'LE':([2,3,4,5,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[-3,14,-4,-5,14,-3,14,14,14,14,14,-11,-12,-13,-14,-15,-16,-10,]),'GE':([2,3,4,5,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[-3,15,-4,-5,15,-3,15,15,15,15,15,-11,-12,-13,-14,-15,-16,-10,]),'EQ':([2,3,4,5,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[-3,16,-4,-5,16,-3,16,16,16,16,16,-11,-12,-13,-14,-15,-16,-10,]),'NE':([2,3,4,5,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[-3,17,-4,-5,17,-3,17,17,17,17,17,-11,-12,-13,-14,-15,-16,-10,]),'RPAREN':([4,5,18,19,21,22,23,24,25,26,27,28,29,30,31,],[-4,-5,31,-3,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,6,7,8,9,10,11,12,13,14,15,16,17,],[3,18,20,21,22,23,24,25,26,27,28,29,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> ID EQUALS expression','statement',3,'p_statement_assign','parser.py',18),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',23),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',27),
  ('expression -> INT','expression',1,'p_expression_int','parser.py',38),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',43),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',50),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',51),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',52),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',53),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',64),
  ('expression -> expression LT expression','expression',3,'p_expression_comparison','parser.py',69),
  ('expression -> expression GT expression','expression',3,'p_expression_comparison','parser.py',70),
  ('expression -> expression LE expression','expression',3,'p_expression_comparison','parser.py',71),
  ('expression -> expression GE expression','expression',3,'p_expression_comparison','parser.py',72),
  ('expression -> expression EQ expression','expression',3,'p_expression_comparison','parser.py',73),
  ('expression -> expression NE expression','expression',3,'p_expression_comparison','parser.py',74),
]
